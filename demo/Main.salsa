
module demo;

import java.io.*;
import java.util.*;

behavior Main {
   String starsFile = "testStars.txt";
   int numStars;
   BufferedReader br;
   int numActors = 5;
   int actorsInUse = 5;

   double minDist = Double.MAX_VALUE;
   double[][] minStar = new double[10][3];
   int minStarsFound = 0;
   double maxDist = 0.0;
   double[][] maxStar = new double[10][3];
   int maxStarsFound = 0;
   double minMax = Double.MAX_VALUE;
   double[][] minMaxStar = new double[5][3];
   int minMaxFound = 0;
   double maxMin = 0.0;
   double[][] maxMinStar = new double[5][3];
   int maxMinFound = 0;
   double avg = Double.MAX_VALUE;
   double[][] avgStar = new double[5][3];
   int avgFound = 0;

   int currentStar = 0;
   Star[] stars;

   void act( String[] argv ) {

      try 
      {
         br = new BufferedReader(new FileReader(starsFile));
      }
      catch (IOException ioe) 
      {
         standardOutput<-println("[error] Can't open the file " + starsFile + " for reading.");
      }

      try
      {
      numStars = Integer.parseInt(br.readLine());
      }
      catch (IOException e)
      {
         standardOutput<-println("[error] Number of stars must be an int");
      }
      
      makeStars();
   }

   void makeStars()
   {
      if(numStars < numActors)
      {
         numActors = numStars;
         actorsInUse = numStars;
      }
      stars = new Star[numActors];
      for(int i = 0; i < numActors; i++)
      {
         stars[i] = new Star();
      }

      for(int i = 0; i < numActors; i++)
      {
         stars[i]<-init(i, starsFile, numStars, self, i);
         currentStar++;
      }
   }

   void starDone(double _min, double[] _minStar, double _max, double[] _maxStar, double _avg, double[] _myPos, int actorNum)
   {

      if(_min < minDist)
      {
         minDist = _min;
         minStar = new double[10][3];
         minStar[0] = _myPos;
         minStar[1] = _minStar;
         minStarsFound = 2;
      }
      else if(_min == minDist)
      {
         boolean repeat = false;
         for(int i = 0; i < minStarsFound; i+=2)
         {
            //standardOutput<-print("\n(" + minStar[i][0] +","  + minStar[i][1] +"," + minStar[i][2] + ")   (" + _minStar[0] +","  + _minStar[1] +"," + _minStar[2] + ")\n(" + minStar[i+1][0] +","  + minStar[i+1][1] +"," + minStar[i+1][2] + ")  (" + _myPos[0] +","  + _myPos[1] +"," + _myPos[2] + ")\n"); 
            
            if(minStar[i][0] == _minStar[0] && minStar[i][1] == _minStar[1] && minStar[i][2] == _minStar[2] && minStar[i+1][0] == _myPos[0] && minStar[i+1][1] == _myPos[1] && minStar[i+1][2] == _myPos[2])
            {
               repeat = true;
               break;
            }
         }

         if(!repeat)
         {
            minStar[minStarsFound] = _myPos;
            minStar[minStarsFound+1] = _minStar;
            minStarsFound+=2;
         }
      }


      if(_max > maxDist)
      {
         maxDist = _max;
         maxStar = new double[10][3];
         maxStar[0] = _myPos;
         maxStar[1] = _maxStar;
         maxStarsFound = 2;
      }
      else if(_max == maxDist)
      {
         boolean repeat = false;
         for(int i = 0; i < maxStarsFound; i+=2)
         {
            //standardOutput<-print("\n(" + minStar[i][0] +","  + minStar[i][1] +"," + minStar[i][2] + ")   (" + _minStar[0] +","  + _minStar[1] +"," + _minStar[2] + ")\n(" + minStar[i+1][0] +","  + minStar[i+1][1] +"," + minStar[i+1][2] + ")  (" + _myPos[0] +","  + _myPos[1] +"," + _myPos[2] + ")\n"); 
            
            if(maxStar[i][0] == _maxStar[0] && maxStar[i][1] == _maxStar[1] && maxStar[i][2] == _maxStar[2] && maxStar[i+1][0] == _myPos[0] && maxStar[i+1][1] == _myPos[1] && maxStar[i+1][2] == _myPos[2])
            {
               repeat = true;
               break;
            }
         }

         if(!repeat)
         {
            maxStar[maxStarsFound] = _myPos;
            maxStar[maxStarsFound+1] = _maxStar;
            maxStarsFound+=2;
         }
      }

      if(_min > maxMin)
      {
         maxMin = _min;
         maxMinStar = new double[5][3];
         maxMinStar[0] = _myPos;
         maxMinFound = 1;
      }
      else if(_min == maxMin)
      {
         boolean repeat = false;
         for(int i = 0; i < maxMinFound; i++)
         {
            //standardOutput<-print("\n(" + minStar[i][0] +","  + minStar[i][1] +"," + minStar[i][2] + ")   (" + _minStar[0] +","  + _minStar[1] +"," + _minStar[2] + ")\n(" + minStar[i+1][0] +","  + minStar[i+1][1] +"," + minStar[i+1][2] + ")  (" + _myPos[0] +","  + _myPos[1] +"," + _myPos[2] + ")\n"); 
            
            if(maxMinStar[i][0] == _minStar[0] && maxMinStar[i][1] == _minStar[1] && maxMinStar[i][2] == _minStar[2] && maxMinStar[i+1][0] == _myPos[0] && maxMinStar[i+1][1] == _myPos[1] && maxMinStar[i+1][2] == _myPos[2])
            {
               repeat = true;
               break;
            }
         }

         if(!repeat)
         {
            maxMinStar[maxStarsFound] = _myPos;
            maxMinFound+=1;
         }
      }

      if(_max < minMax)
      {
         minMax = _max;
         maxMinStar = new double[5][3];
         minMaxStar[0] = _myPos;
         minMaxFound = 1;
      }
      else if(_max == minMax)
      {
         boolean repeat = false;
         for(int i = 0; i < minMaxFound; i++)
         {
            //standardOutput<-print("\n(" + minStar[i][0] +","  + minStar[i][1] +"," + minStar[i][2] + ")   (" + _minStar[0] +","  + _minStar[1] +"," + _minStar[2] + ")\n(" + minStar[i+1][0] +","  + minStar[i+1][1] +"," + minStar[i+1][2] + ")  (" + _myPos[0] +","  + _myPos[1] +"," + _myPos[2] + ")\n"); 
            
            if(minMaxStar[i][0] == _maxStar[0] && minMaxStar[i][1] == _maxStar[1] && minMaxStar[i][2] == _maxStar[2] && minMaxStar[i+1][0] == _myPos[0] && minMaxStar[i+1][1] == _myPos[1] && minMaxStar[i+1][2] == _myPos[2])
            {
               repeat = true;
               break;
            }
         }

         if(!repeat)
         {
            minMaxStar[maxStarsFound] = _myPos;
            minMaxFound+=1;
         }
      }
      if(_avg < avg)
      {
         avg = _avg;
         avgStar = new double[5][3];
         avgStar[0] = _myPos;
         avgFound = 1;
      }
      else if(_avg == avg)
      {
         avgStar[avgFound] = _myPos;
         avgFound+=1;
      }

      if(currentStar < numStars)
      {
         stars[actorNum]<-init(currentStar, starsFile, numStars, self, actorNum);
         currentStar++;
      }
      else
      {
         if(actorsInUse > 1)
         {
            actorsInUse--;
         }
         else
            outputResults();
      }

   }

   void outputResults()
   {
      standardOutput<-println(minDist + "  // minimal pairwise distance")@
      join
      {
         for(int i = 0; i < minStarsFound; i += 2)
         {
            standardOutput<-print("(" + minStar[i][0] +","  + minStar[i][1] +"," + minStar[i][2] +")\t(" + minStar[i+1][0] +","  + minStar[i+1][1] +"," + minStar[i+1][2] +")\n");  
         }
      }@standardOutput<-println("")@


      standardOutput<-println(maxDist + "  // maximal pairwise distance")@
      join
      {
         for(int i = 0; i < maxStarsFound; i += 2)
         {
            standardOutput<-print("(" + maxStar[i][0] +","  + maxStar[i][1] +"," + maxStar[i][2] +")\t(" + maxStar[i+1][0] +","  + maxStar[i+1][1] +"," + maxStar[i+1][2] +")\n");
         }
      }@standardOutput<-println("")@

      standardOutput<-println(minMax + "  // minimum maximal distance")@
      join
      {
         for(int i = 0; i < minMaxFound; i++)
         {
            standardOutput<-print("(" + minMaxStar[i][0] +","  + minMaxStar[i][1] +"," + minMaxStar[i][2] +")  \n");
         }
      }@standardOutput<-println("")@

      standardOutput<-println(maxMin + "  // maximum minimal distance")@
      join
      {
         for(int i = 0; i < maxMinFound; i++)
         {
            standardOutput<-println("(" + maxMinStar[i][0] +","  + maxMinStar[i][1] +"," + maxMinStar[i][2] +")  \n");
         }
      }@standardOutput<-println("")@

      standardOutput<-println(avg + "  // minimal average distance")@
      join
      {
         for(int i = 0; i < avgFound; i++)
         {
            standardOutput<-println("(" + avgStar[i][0] +","  + avgStar[i][1] +"," + avgStar[i][2] +")  \n");
         }
      }@standardOutput<-println("");

   }

}
