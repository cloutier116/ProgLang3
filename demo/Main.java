package demo;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.io.*;
import java.util.*;

public class Main extends UniversalActor  {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		RunTime.receivedMessage();
		Main instance = (Main)new Main(uan, ual,null).construct();
		gc.WeakReference instanceRef=new gc.WeakReference(uan,ual);
		{
			Object[] _arguments = { args };

			//preAct() for local actor creation
			//act() for remote actor creation
			if (ual != null && !ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {instance.send( new Message(instanceRef, instanceRef, "act", _arguments, false) );}
			else {instance.send( new Message(instanceRef, instanceRef, "preAct", _arguments, false) );}
		}
		RunTime.finishedProcessingMessage();
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new Main(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return Main.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new Main(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return Main.getReferenceByLocation(new UAL(ual)); }
	public Main(boolean o, UAN __uan)	{ super(false,__uan); }
	public Main(boolean o, UAL __ual)	{ super(false,__ual); }
	public Main(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null, sourceActor); }
	public Main(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual, sourceActor); }
	public Main(UniversalActor.State sourceActor)		{ this(null, null, sourceActor);  }
	public Main()		{  }
	public Main(UAN __uan, UAL __ual, Object obj) {
		//decide the type of sourceActor
		//if obj is null, the actor must be the startup actor.
		//if obj is an actorReference, this actor is created by a remote actor

		if (obj instanceof UniversalActor.State || obj==null) {
			  UniversalActor.State sourceActor;
			  if (obj!=null) { sourceActor=(UniversalActor.State) obj;}
			  else {sourceActor=null;}

			  //remote creation message sent to a remote system service.
			  if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			    WeakReference sourceRef;
			    if (sourceActor!=null && sourceActor.getUAL() != null) {sourceRef = new WeakReference(sourceActor.getUAN(),sourceActor.getUAL());}
			    else {sourceRef = null;}
			    if (sourceActor != null) {
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual!=null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());
			      activateGC();
			    }
			    createRemotely(__uan, __ual, "demo.Main", sourceRef);
			  }

			  // local creation
			  else {
			    State state = new State(__uan, __ual);

			    //assume the reference is weak
			    muteGC();

			    //the source actor is  the startup actor
			    if (sourceActor == null) {
			      state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			    }

			    //the souce actor is a normal actor
			    else if (sourceActor instanceof UniversalActor.State) {

			      // this reference is part of garbage collection
			      activateGC();

			      //update the source of this actor reference
			      setSource(sourceActor.getUAN(), sourceActor.getUAL());

			      /* Garbage collection registration:
			       * register 'this reference' in sourceActor's forward list @
			       * register 'this reference' in the forward acquaintance's inverse list
			       */
			      String inverseRefString=null;
			      if (sourceActor.getUAN()!=null) {inverseRefString=sourceActor.getUAN().toString();}
			      else if (sourceActor.getUAL()!=null) {inverseRefString=sourceActor.getUAL().toString();}
			      if (__uan != null) {sourceActor.getActorMemory().getForwardList().putReference(__uan);}
			      else if (__ual != null) {sourceActor.getActorMemory().getForwardList().putReference(__ual);}
			      else {sourceActor.getActorMemory().getForwardList().putReference(state.getUAL());}

			      //put the inverse reference information in the actormemory
			      if (inverseRefString!=null) state.getActorMemory().getInverseList().putInverseReference(inverseRefString);
			    }
			    state.updateSelf(this);
			    ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			    if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
			  }
		}

		//creation invoked by a remote message
		else if (obj instanceof ActorReference) {
			  ActorReference sourceRef= (ActorReference) obj;
			  State state = new State(__uan, __ual);
			  muteGC();
			  state.getActorMemory().getInverseList().putInverseReference("rmsp://me");
			  if (sourceRef.getUAN() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAN());}
			  else if (sourceRef.getUAL() != null) {state.getActorMemory().getInverseList().putInverseReference(sourceRef.getUAL());}
			  state.updateSelf(this);
			  ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(),state);
			  if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State {
		public Main self;
		public void updateSelf(ActorReference actorReference) {
			((Main)actorReference).setUAL(getUAL());
			((Main)actorReference).setUAN(getUAN());
			self = new Main(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.activateGC();
		}

		public void preAct(String[] arguments) {
			getActorMemory().getInverseList().removeInverseReference("rmsp://me",1);
			{
				Object[] __args={arguments};
				self.send( new Message(self,self, "act", __args, null,null,false) );
			}
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "demo.Main$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		String starsFile = "testStars.txt";
		int numStars;
		BufferedReader br;
		int numActors = 5;
		int actorsInUse = 5;
		double minDist = Double.MAX_VALUE;
		double[][] minStar = new double[10][3];
		int minStarsFound = 0;
		double maxDist = 0.0;
		double[][] maxStar = new double[10][3];
		int maxStarsFound = 0;
		double minMax = Double.MAX_VALUE;
		double[][] minMaxStar = new double[5][3];
		int minMaxFound = 0;
		double maxMin = 0.0;
		double[][] maxMinStar = new double[5][3];
		int maxMinFound = 0;
		double avg = Double.MAX_VALUE;
		double[][] avgStar = new double[5][3];
		int avgFound = 0;
		int currentStar = 0;
		Star[] stars;
		public void act(String[] argv) {
			try {
				br = new BufferedReader(new FileReader(starsFile));
			}
			catch (IOException ioe) {
				{
					// standardOutput<-println("[error] Can't open the file "+starsFile+" for reading.")
					{
						Object _arguments[] = { "[error] Can't open the file "+starsFile+" for reading." };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

			try {
				numStars = Integer.parseInt(br.readLine());
			}
			catch (IOException e) {
				{
					// standardOutput<-println("[error] Number of stars must be an int")
					{
						Object _arguments[] = { "[error] Number of stars must be an int" };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
			}

			{
				// makeStars()
				{
					Object _arguments[] = {  };
					Message message = new Message( self, self, "makeStars", _arguments, null, null );
					__messages.add( message );
				}
			}
		}
		public void makeStars() {
			if (numStars<numActors) {{
				numActors = numStars;
				actorsInUse = numStars;
			}
}			stars = new Star[numActors];
			for (int i = 0; i<numActors; i++){
				stars[i] = ((Star)new Star(this).construct());
			}
			for (int i = 0; i<numActors; i++){
				{
					// stars[i]<-init(i, starsFile, numStars, ((Main)self), i)
					{
						Object _arguments[] = { i, starsFile, numStars, ((Main)self), i };
						Message message = new Message( self, stars[i], "init", _arguments, null, null );
						__messages.add( message );
					}
				}
				currentStar++;
			}
		}
		public void starDone(double _min, double[] _minStar, double _max, double[] _maxStar, double _avg, double[] _myPos, int actorNum) {
			if (_min<minDist) {{
				minDist = _min;
				minStar = new double[10][3];
				minStar[0] = _myPos;
				minStar[1] = _minStar;
				minStarsFound = 2;
			}
}			else {if (_min==minDist) {{
				boolean repeat = false;
				for (int i = 0; i<minStarsFound; i += 2){
					if (minStar[i][0]==_minStar[0]&&minStar[i][1]==_minStar[1]&&minStar[i][2]==_minStar[2]&&minStar[i+1][0]==_myPos[0]&&minStar[i+1][1]==_myPos[1]&&minStar[i+1][2]==_myPos[2]) {{
						repeat = true;
break;					}
}				}
				if (!repeat) {{
					minStar[minStarsFound] = _myPos;
					minStar[minStarsFound+1] = _minStar;
					minStarsFound += 2;
				}
}			}
}}			if (_max>maxDist) {{
				maxDist = _max;
				maxStar = new double[10][3];
				maxStar[0] = _myPos;
				maxStar[1] = _maxStar;
				maxStarsFound = 2;
			}
}			else {if (_max==maxDist) {{
				boolean repeat = false;
				for (int i = 0; i<maxStarsFound; i += 2){
					if (maxStar[i][0]==_maxStar[0]&&maxStar[i][1]==_maxStar[1]&&maxStar[i][2]==_maxStar[2]&&maxStar[i+1][0]==_myPos[0]&&maxStar[i+1][1]==_myPos[1]&&maxStar[i+1][2]==_myPos[2]) {{
						repeat = true;
break;					}
}				}
				if (!repeat) {{
					maxStar[maxStarsFound] = _myPos;
					maxStar[maxStarsFound+1] = _maxStar;
					maxStarsFound += 2;
				}
}			}
}}			if (_min>maxMin) {{
				maxMin = _min;
				maxMinStar = new double[5][3];
				maxMinStar[0] = _myPos;
				maxMinFound = 1;
			}
}			else {if (_min==maxMin) {{
				boolean repeat = false;
				for (int i = 0; i<maxMinFound; i++){
					if (maxMinStar[i][0]==_minStar[0]&&maxMinStar[i][1]==_minStar[1]&&maxMinStar[i][2]==_minStar[2]&&maxMinStar[i+1][0]==_myPos[0]&&maxMinStar[i+1][1]==_myPos[1]&&maxMinStar[i+1][2]==_myPos[2]) {{
						repeat = true;
break;					}
}				}
				if (!repeat) {{
					maxMinStar[maxStarsFound] = _myPos;
					maxMinFound += 1;
				}
}			}
}}			if (_max<minMax) {{
				minMax = _max;
				maxMinStar = new double[5][3];
				minMaxStar[0] = _myPos;
				minMaxFound = 1;
			}
}			else {if (_max==minMax) {{
				boolean repeat = false;
				for (int i = 0; i<minMaxFound; i++){
					if (minMaxStar[i][0]==_maxStar[0]&&minMaxStar[i][1]==_maxStar[1]&&minMaxStar[i][2]==_maxStar[2]&&minMaxStar[i+1][0]==_myPos[0]&&minMaxStar[i+1][1]==_myPos[1]&&minMaxStar[i+1][2]==_myPos[2]) {{
						repeat = true;
break;					}
}				}
				if (!repeat) {{
					minMaxStar[maxStarsFound] = _myPos;
					minMaxFound += 1;
				}
}			}
}}			if (_avg<avg) {{
				avg = _avg;
				avgStar = new double[5][3];
				avgStar[0] = _myPos;
				avgFound = 1;
			}
}			else {if (_avg==avg) {{
				avgStar[avgFound] = _myPos;
				avgFound += 1;
			}
}}			if (currentStar<numStars) {{
				{
					// stars[actorNum]<-init(currentStar, starsFile, numStars, ((Main)self), actorNum)
					{
						Object _arguments[] = { currentStar, starsFile, numStars, ((Main)self), actorNum };
						Message message = new Message( self, stars[actorNum], "init", _arguments, null, null );
						__messages.add( message );
					}
				}
				currentStar++;
			}
}			else {{
				if (actorsInUse>1) {{
					actorsInUse--;
				}
}				else {				{
					// outputResults()
					{
						Object _arguments[] = {  };
						Message message = new Message( self, self, "outputResults", _arguments, null, null );
						__messages.add( message );
					}
				}
}			}
}		}
		public void outputResults() {
			{
				Token token_2_0 = new Token();
				Token token_2_1 = new Token();
				Token token_2_2 = new Token();
				Token token_2_3 = new Token();
				Token token_2_4 = new Token();
				Token token_2_5 = new Token();
				Token token_2_6 = new Token();
				Token token_2_7 = new Token();
				Token token_2_8 = new Token();
				Token token_2_9 = new Token();
				Token token_2_10 = new Token();
				Token token_2_11 = new Token();
				Token token_2_12 = new Token();
				Token token_2_13 = new Token();
				// standardOutput<-println(minDist+"  // minimal pairwise distance")
				{
					Object _arguments[] = { minDist+"  // minimal pairwise distance" };
					Message message = new Message( self, standardOutput, "println", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// join block
				token_2_1.setJoinDirector();
				for (int i = 0; i<minStarsFound; i += 2){
					{
						// standardOutput<-print("("+minStar[i][0]+","+minStar[i][1]+","+minStar[i][2]+")\t("+minStar[i+1][0]+","+minStar[i+1][1]+","+minStar[i+1][2]+")\n")
						{
							Object _arguments[] = { "("+minStar[i][0]+","+minStar[i][1]+","+minStar[i][2]+")\t("+minStar[i+1][0]+","+minStar[i+1][1]+","+minStar[i+1][2]+")\n" };
							Message message = new Message( self, standardOutput, "print", _arguments, token_2_0, token_2_1 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_1);
				// standardOutput<-println("")
				{
					Object _arguments[] = { "" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_1, token_2_2 );
					__messages.add( message );
				}
				// standardOutput<-println(maxDist+"  // maximal pairwise distance")
				{
					Object _arguments[] = { maxDist+"  // maximal pairwise distance" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_2, token_2_3 );
					__messages.add( message );
				}
				// join block
				token_2_4.setJoinDirector();
				for (int i = 0; i<maxStarsFound; i += 2){
					{
						// standardOutput<-print("("+maxStar[i][0]+","+maxStar[i][1]+","+maxStar[i][2]+")\t("+maxStar[i+1][0]+","+maxStar[i+1][1]+","+maxStar[i+1][2]+")\n")
						{
							Object _arguments[] = { "("+maxStar[i][0]+","+maxStar[i][1]+","+maxStar[i][2]+")\t("+maxStar[i+1][0]+","+maxStar[i+1][1]+","+maxStar[i+1][2]+")\n" };
							Message message = new Message( self, standardOutput, "print", _arguments, token_2_3, token_2_4 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_4);
				// standardOutput<-println("")
				{
					Object _arguments[] = { "" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_4, token_2_5 );
					__messages.add( message );
				}
				// standardOutput<-println(minMax+"  // minimum maximal distance")
				{
					Object _arguments[] = { minMax+"  // minimum maximal distance" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_5, token_2_6 );
					__messages.add( message );
				}
				// join block
				token_2_7.setJoinDirector();
				for (int i = 0; i<minMaxFound; i++){
					{
						// standardOutput<-print("("+minMaxStar[i][0]+","+minMaxStar[i][1]+","+minMaxStar[i][2]+")  \n")
						{
							Object _arguments[] = { "("+minMaxStar[i][0]+","+minMaxStar[i][1]+","+minMaxStar[i][2]+")  \n" };
							Message message = new Message( self, standardOutput, "print", _arguments, token_2_6, token_2_7 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_7);
				// standardOutput<-println("")
				{
					Object _arguments[] = { "" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_7, token_2_8 );
					__messages.add( message );
				}
				// standardOutput<-println(maxMin+"  // maximum minimal distance")
				{
					Object _arguments[] = { maxMin+"  // maximum minimal distance" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_8, token_2_9 );
					__messages.add( message );
				}
				// join block
				token_2_10.setJoinDirector();
				for (int i = 0; i<maxMinFound; i++){
					{
						// standardOutput<-println("("+maxMinStar[i][0]+","+maxMinStar[i][1]+","+maxMinStar[i][2]+")  \n")
						{
							Object _arguments[] = { "("+maxMinStar[i][0]+","+maxMinStar[i][1]+","+maxMinStar[i][2]+")  \n" };
							Message message = new Message( self, standardOutput, "println", _arguments, token_2_9, token_2_10 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_10);
				// standardOutput<-println("")
				{
					Object _arguments[] = { "" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_10, token_2_11 );
					__messages.add( message );
				}
				// standardOutput<-println(avg+"  // minimal average distance")
				{
					Object _arguments[] = { avg+"  // minimal average distance" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_11, token_2_12 );
					__messages.add( message );
				}
				// join block
				token_2_13.setJoinDirector();
				for (int i = 0; i<avgFound; i++){
					{
						// standardOutput<-println("("+avgStar[i][0]+","+avgStar[i][1]+","+avgStar[i][2]+")  \n")
						{
							Object _arguments[] = { "("+avgStar[i][0]+","+avgStar[i][1]+","+avgStar[i][2]+")  \n" };
							Message message = new Message( self, standardOutput, "println", _arguments, token_2_12, token_2_13 );
							__messages.add( message );
						}
					}
				}
				addJoinToken(token_2_13);
				// standardOutput<-println("")
				{
					Object _arguments[] = { "" };
					Message message = new Message( self, standardOutput, "println", _arguments, token_2_13, null );
					__messages.add( message );
				}
			}
		}
	}
}